{"version":3,"sources":["react-wire.js"],"names":["capitalize","str","toUpperCase","slice","getEventName","property","action","fireEvent","name","_len","arguments","length","args","Array","_key","listeners","wireListeners","forEach","component","apply","registerWire","Object","keys","matches","match","wireEventExpression","method","push","this","wireComponents","set","store","unregisterWire","get","idx","indexOf","splice","console","log","subscribe","defineProperty","exports","value","WeakMap","wireData","wireHandler","deleteProperty","target","eventName","_eventName","Proxy","mixin","componentWillMount","componentWillUnmount"],"mappings":";AACA,YAOA,SAASA,YAAWC,GAChB,MAAOA,GAAI,GAAGC,cAAgBD,EAAIE,MAAM,GAG5C,QAASC,cAAaC,EAAUC,GAC5B,MAAA,SAAgBN,WAAWK,GAAYL,WAAWM,GAGtD,QAASC,WAAUC,GAAe,IAAA,GAAAC,GAAAC,UAAAC,OAANC,EAAMC,MAAAJ,EAAA,EAAAA,EAAA,EAAA,GAAAK,EAAA,EAAAL,EAAAK,EAAAA,IAANF,EAAME,EAAA,GAAAJ,UAAAI,EAC9B,IAAMC,GAAYC,cAAcR,MAChCO,GAAUE,QAAS,SAAAC,GACfA,EAAUV,GAAVW,MAAAD,EAAmBN,KA4B3B,QAASQ,cAAaF,GAClB,GAAIH,KACJM,QAAOC,KAAKJ,GAAWD,QAAS,SAAAT,GAC5B,GAAIe,GAAUf,EAAKgB,MAAMC,oBACzB,IAAGF,EAAS,CACR,GAAMG,GAASH,EAAQ,EACnBP,eAAcU,KACdV,cAAcU,OAElBV,cAAcU,GAAQC,KAAKT,GAC3BH,EAAUY,KAAKD,KAEpBE,MACHC,eAAeC,IAAIZ,EAAWH,GAE9BG,EAAUa,MAAQA,MAEtB,QAASC,gBAAed,GACpB,GAAIH,GAAYc,eAAeI,IAAIf,EACnCH,GAAUE,QAAS,SAAAT,GACf,GAAGQ,cAAcR,GAAO,CACpB,GAAI0B,GAAMlB,cAAcR,GAAM2B,QAAQjB,IAClCgB,EACAlB,cAAcR,GAAM4B,OAAOF,EAAK,GAEhCG,QAAQC,IAAR,aAAyB9B,EAAzB,4BAGJ6B,SAAQC,IAAR,SAAqB9B,EAArB,qBAELoB,MACHC,eAAAA,UAAsBX,GAGnB,QAASqB,WAAUlC,GACtB,MAAOD,cAAaC,EAAU,UA/ElCgB,OAAOmB,eAAeC,QAAS,cAC3BC,OAAO,IAEXD,QA2EgBF,UAAAA,SA9EhB,IAAMd,qBAAsB,cACtBT,iBACAa,eAAiB,GAAIc,SACrBC,YAiBAC,aACFC,eAAgB,SAASC,EAAQ1C,GAC7B,GAAM2C,GAAY5C,aAAaC,EAAU,SAGzC,OAFAE,WAAUyC,SACHD,GAAO1C,IACP,GAEXyB,IAPgB,SAOXiB,EAAQ1C,EAAUqC,GACnB,GAAGrC,IAAY0C,GAAQ,CACnB,GAAMC,GAAY5C,aAAaC,EAAU,SACzCE,WAAUyC,EAAWN,EAAOK,EAAO1C,QAChC,CACH,GAAM4C,GAAY7C,aAAaC,EAAU,SACzCE,WAAU0C,EAAWP,EAAOK,EAAO1C,IAGvC,MADA0C,GAAO1C,GAAYqC,GACZ,GAEXT,IAlBgB,SAkBXc,EAAQ1C,GACT,MAAO0C,GAAO1C,KAGT0B,MAAAU,QAAAV,MAAQ,GAAImB,OAAMN,SAAUC,aAwC5BM,MAAAV,QAAAU,OACTC,mBADiB,WAEbhC,aAAaQ,OAEjByB,qBAJiB,WAKbrB,eAAeJ","file":"react-wire.min.js","sourcesContent":["/*! React Wire v0.0.1 | Copyright (c) 2016 Ivan (3axap4eHko) Zakharchenko*/\r\n'use strict';\r\n\r\nconst wireEventExpression = /^onWire\\w+$/;\r\nconst wireListeners = {};\r\nconst wireComponents = new WeakMap();\r\nconst wireData = {};\r\n\r\nfunction capitalize(str) {\r\n    return str[0].toUpperCase() + str.slice(1);\r\n}\r\n\r\nfunction getEventName(property, action) {\r\n    return `onWire${capitalize(property)}${capitalize(action)}`;\r\n}\r\n\r\nfunction fireEvent(name, ...args) {\r\n    const listeners = wireListeners[name] || [];\r\n    listeners.forEach( component => {\r\n        component[name](...args);\r\n    });\r\n}\r\n\r\nconst wireHandler = {\r\n    deleteProperty: function(target, property) {\r\n        const eventName = getEventName(property, 'change');\r\n        fireEvent(eventName);\r\n        delete target[property];\r\n        return true;\r\n    },\r\n    set (target, property, value) {\r\n        if(property in target) {\r\n            const eventName = getEventName(property, 'change');\r\n            fireEvent(eventName, value, target[property]);\r\n        } else {\r\n            const eventName = getEventName(property, 'change');\r\n            fireEvent(eventName, value, target[property]);\r\n        }\r\n        target[property] = value;\r\n        return true;\r\n    },\r\n    get (target, property) {\r\n        return target[property];\r\n    }\r\n};\r\nexport const store = new Proxy(wireData, wireHandler);\r\n\r\nfunction registerWire(component) {\r\n    var listeners = [];\r\n    Object.keys(component).forEach( name => {\r\n        var matches = name.match(wireEventExpression);\r\n        if(matches) {\r\n            const method = matches[0];\r\n            if(!wireListeners[method]) {\r\n                wireListeners[method] = [];\r\n            }\r\n            wireListeners[method].push(component);\r\n            listeners.push(method);\r\n        }\r\n    }, this);\r\n    wireComponents.set(component, listeners);\r\n\r\n    component.store = store;\r\n}\r\nfunction unregisterWire(component) {\r\n    var listeners = wireComponents.get(component);\r\n    listeners.forEach( name => {\r\n        if(wireListeners[name]) {\r\n            var idx = wireListeners[name].indexOf(component);\r\n            if(~idx) {\r\n                wireListeners[name].splice(idx, 1);\r\n            } else {\r\n                console.log(`Component ${name} does not registered`);\r\n            }\r\n        } else {\r\n            console.log(`Event ${name} does not exists`);\r\n        }\r\n    }, this);\r\n    wireComponents.delete(component);\r\n}\r\n\r\nexport function subscribe(property) {\r\n    return getEventName(property, 'change');\r\n}\r\n\r\nexport const mixin = {\r\n    componentWillMount() {\r\n        registerWire(this);\r\n    },\r\n    componentWillUnmount() {\r\n        unregisterWire(this);\r\n    }\r\n};"],"sourceRoot":"/source/"}